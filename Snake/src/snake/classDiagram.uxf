<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.0.0">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>32</x>
      <y>0</y>
      <w>384</w>
      <h>832</h>
    </coordinates>
    <panel_attributes>snake::Game
--
#mapSizes = new int[] { 8, 16, 24, 32, 40 }: int[]
#difficulties = new String[] { "KÃ¶nnyÅ±", "NormÃ¡l", "NehÃ©z" }: String[]
#imageMap = new HashMap&lt;String, BufferedImage&gt;() {&#13;
&#13;
    {&#13;
        put("tail_up", getImage("/textures/tail_up.png"));&#13;
        put("tail_right", getImage("/textures/tail_right.png"));&#13;
        put("tail_left", getImage("/textures/tail_left.png"));&#13;
        put("tail_down", getImage("/textures/tail_down.png"));&#13;
        put("head_up", getImage("/textures/head_up.png"));&#13;
        put("head_right", getImage("/textures/head_right.png"));&#13;
        put("head_left", getImage("/textures/head_left.png"));&#13;
        put("head_down", getImage("/textures/head_down.png"));&#13;
        put("body_vertical", getImage("/textures/body_vertical.png"));&#13;
        put("body_topright", getImage("/textures/body_topright.png"));&#13;
        put("body_topleft", getImage("/textures/body_topleft.png"));&#13;
        put("body_horizontal", getImage("/textures/body_horizontal.png"));&#13;
        put("body_bottomright", getImage("/textures/body_bottomright.png"));&#13;
        put("body_bottomleft", getImage("/textures/body_bottomleft.png"));&#13;
        put("grass", getImage("/textures/grass.png"));&#13;
        put("tree", getImage("/textures/tree.png"));&#13;
        put("apple", getImage("/textures/apple.png"));&#13;
    }&#13;
}: Map&lt;String, BufferedImage&gt;
#utf8Text = getUTF8Texts(): Map&lt;String, String&gt;
#gamePanel: GamePanel
-soundPlayer: SoundPlayer
-fileManager: FileManager
-settings: Settings
-rankings: Rankings
-displayMenu: Menu
--
+Game(GamePanel gamePanel): ctor
+startGame(Menu menu, String mapDifficulty, int mapSize): void
+update(long milisecs): void
+repaint(): void
+saveMap(GameMap map): void
+setMenu(Menu menu): void
+paintComponent(Graphics2D g2): void
+playSound(String fileName): void
+setSetting(String key, Object value): void
+getSetting(String key): Object
+getSettingString(String key): String
+getLoadableMaps(): ArrayList&lt;GameMap&gt;
+loadMap(GameMap gameMap): void
+getImage(String imageSource): BufferedImage
+getUTF8Texts(): Map&lt;String, String&gt;
+toUTF8(String string): String
+getText(String textKey): String
+getMusicVolume(): float
+getEffectsVolume(): float
+setMusicVolume(float volume): void
+setEffectsVolume(float volume): void
+getRankings(): Rankings
+addRank(Rank rank): void
+getDisplayMenu(): Menu
+keyTyped(char key): void
+keyPressed(int keyCode): void
+keyReleased(int keyCode): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>424</x>
      <y>0</y>
      <w>272</w>
      <h>736</h>
    </coordinates>
    <panel_attributes>snake::GamePanel
--
-keysToHandle = new HashSet&lt;Integer&gt;() {&#13;
&#13;
    {&#13;
        // Snake/Menu left/up&#13;
        add(KeyEvent.VK_A);&#13;
        // Snake/Menu up&#13;
        add(KeyEvent.VK_W);&#13;
        // Snake/Menu down&#13;
        add(KeyEvent.VK_S);&#13;
        // Snake/Menu right/down&#13;
        add(KeyEvent.VK_D);&#13;
        // Snake/Menu left/up&#13;
        add(KeyEvent.VK_LEFT);&#13;
        // Snake/Menu up&#13;
        add(KeyEvent.VK_UP);&#13;
        // Snake/Menu down&#13;
        add(KeyEvent.VK_DOWN);&#13;
        // Snake/Menu right/down&#13;
        add(KeyEvent.VK_RIGHT);&#13;
        // Pause ingame&#13;
        add(KeyEvent.VK_P);&#13;
        // Enter for menu choosing&#13;
        add(KeyEvent.VK_ENTER);&#13;
        // Space for menu choosing&#13;
        add(KeyEvent.VK_SPACE);&#13;
    }&#13;
}: Set&lt;Integer&gt;
~tileSize = 24: int
~coreTileQuantity = 16: int
~game: Game
-window: JFrame
-tileQuantity = coreTileQuantity: int
-extraWidth = 0: int
~keyHandler = new KeyHandler(this): KeyHandler
~gameThread: Thread
--
+GamePanel(JFrame window): ctor
+startGameThread(): void
+keyTyped(// typed uses keyChar insted of keyCode&#13;
KeyEvent e): // typed uses keyChar insted of keyCode&#13;
void
+keyPressed(KeyEvent e): void
+keyReleased(KeyEvent e): void
+getTileSize(): int
+getCoreTileQuantity(): int
+getTileQuantity(): int
+getScreenSize(): int
+getExtraWidth(): int
+setExtraWidth(int width): void
+setTileQuantity(int tileQuantity): void
+run(): void
+paintComponent(Graphics g): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>704</x>
      <y>0</y>
      <w>464</w>
      <h>536</h>
    </coordinates>
    <panel_attributes>snake::GameMap
--
-mapDifficulty = null: String
-mapSize = 0: int
-food = null: Food
-generated = false: boolean
-gameEnd = false: boolean
-gamePause = false: boolean
-points = 0: int
-playerName: String
-saveDate = new Date(): Date
~map = new ArrayList&lt;ArrayList&lt;Block&gt;&gt;(): ArrayList&lt;ArrayList&lt;Block&gt;&gt;
~snake = new ArrayList&lt;Cell&gt;(): ArrayList&lt;Cell&gt;
--
+GameMap(Game game, Menu previousMenu, String playerName, String saveTime): ctor
+GameMap(Game game, Menu previousMenu, String playerName): ctor
+generateMap(String mapDifficulty, int mapSize): void
+draw(Graphics2D g2): void
+hit(Head head, int coordX, int coordY, GameMap gameMap): void
+foodEaten(): void
+snakeAddCell(int coordX, int coordY, String headDirection): void
-spawnFood(): void
+addPoint(): void
-countWallsAround(int coordX, int coordY): int
+update(long milisecs): void
+handleMenuOption(): void
+keyPressed(int keyCode): void
+keyTyped(char key): void
+getMapSize(): int
+getMapDifficulty(): String
+getTilesize(): int
+getSnake(): ArrayList&lt;Cell&gt;
+getGameEnd(): boolean
+getGamePause(): boolean
+getPlayerName(): String
+getBlockByCoords(int coordX, int coordY): Block
+setBlock(Block block): void
+setGameEnd(boolean gameEnd): void
+toString(): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1176</x>
      <y>0</y>
      <w>416</w>
      <h>384</h>
    </coordinates>
    <panel_attributes>/snake::Menu/
--
#menuOptions: String[]
#playerOption: int
#game: Game
#previousMenu: Menu
#isMap = false: boolean
#ignorePressedKeys = false: boolean
--
+Menu(Game game, Menu previousMenu): ctor
+handleMenuOption(): void
+keyTyped(char key): void
+draw(Graphics2D g2): void
+update(long milisecs): void
#addVisibleOption(Graphics2D g2, int i, int slot, String extraText): void
#addVisibleArrow(Graphics2D g2, int slot, boolean fillLeft, boolean fillRight): void
#addVisibleOption(Graphics2D g2, int i, int slot): void
+keyPressed(int keyCode): void
+keyReleased(int keyCode): void
+getMenuOptions(): String[]
+getPlayerOption(): int
+getIsMap(): boolean
+getPreviousMenu(): Menu
+getIgnorePressedKeys(): boolean
+setPlayerOption(int playerOption): void
+nextPlayerOption(): void
+previousPlayerOption(): void
+setIgnorePressedKeys(boolean ignorePressedKeys): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1600</x>
      <y>0</y>
      <w>280</w>
      <h>368</h>
    </coordinates>
    <panel_attributes>snake::Settings
--
-settings = new HashMap&lt;String, Object&gt;() {&#13;
&#13;
    {&#13;
        // Sound Settings&#13;
        put("backgroundVolume", (float) 0.3);&#13;
        put("effectsVolume", (float) 0.8);&#13;
        // New Game Settings&#13;
        put("playerName", "JÃ¡tÃ©kos");&#13;
        put("mapSize", new ArrayList&lt;Integer&gt;() {&#13;
&#13;
            {&#13;
                add(16);&#13;
                add(16);&#13;
            }&#13;
        });&#13;
        put("difficulty", "KÃ¶nnyÅ±");&#13;
    }&#13;
}: Map&lt;String, Object&gt;
--
+getSettingKeys(): Set&lt;String&gt;
+getSetting(String key): Object
+getSettingString(String key): String
+getSettings(): HashMap&lt;String, Object&gt;
+setSettings(HashMap&lt;String, Object&gt; settings): void
+setSetting(String key, Object value): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>32</x>
      <y>840</y>
      <w>392</w>
      <h>248</h>
    </coordinates>
    <panel_attributes>snake::Cell
--
-life: int
-cellDirection: String
-headDirection: String
-isTail = false: boolean
-tailDirection: String
--
+Cell(GameMap map, int x, int y, String direction, String headDirection): ctor
+getLife(): int
+getCellDirection(): String
+getHeadDirection(): String
+cellDie(): void
+setLife(int life): void
+draw(Graphics2D g2, int coordX, int coordY): void
+update(long millisecs): void
+hit(Head head, GameMap map): void
+keyPressed(int keyCode): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>432</x>
      <y>840</y>
      <w>264</w>
      <h>248</h>
    </coordinates>
    <panel_attributes>snake::Head
--
~startSpeed = 400: long
~endSpeed = 100: long
-currentSpeed = startSpeed: long
-lastFrameTime = 0: long
-snakeDirection = "left": String
-animatedDirection = snakeDirection: String
--
+Head(GameMap map, int x, int y): ctor
+draw(Graphics2D g2, int coordX, int coordY): void
+update(long milisecs): void
+step(String direction): void
+cellDie(): void
+die(): void
+keyPressed(int keyCode): void
+getSpeedValue(): float
+setDirection(String direction): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>704</x>
      <y>840</y>
      <w>288</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>snake::FileManager
--
-rankingsFile: File
-settingsFile: File
-game: Game
--
+FileManager(Game game): ctor
+loadSettings(): Settings
+loadRankings(): Rankings
+getLoadableMaps(): ArrayList&lt;GameMap&gt;
+loadMap(File mapFile): GameMap
+getFile(String filePath): File
+saveSettings(Settings settings): void
+saveRankings(Rankings rankings): void
+saveMap(GameMap map, String saveName): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>840</y>
      <w>360</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>snake::LoadGameMenu
--
~loadableMaps = new ArrayList&lt;GameMap&gt;(): ArrayList&lt;GameMap&gt;
~menuPage = 0: int
~previousPlayerOption = this.playerOption: int
--
+LoadGameMenu(Game game, Menu previousMenu): ctor
+LoadGameMenu(Game game): ctor
+draw(Graphics2D g2): void
-refreshMenuOptions(): void
+keyPressed(int keyCode): void
+handleMenuOption(): void
+keyTyped(char key): void
-getMenuState(): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1368</x>
      <y>840</y>
      <w>296</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>snake::RankingsMenu
--
-menuPage = 0: int
-previousPlayerOption = this.playerOption: int
-rankings: Rankings
--
+RankingsMenu(Game game, Menu previousMenu): ctor
+RankingsMenu(Game game): ctor
+draw(Graphics2D g2): void
-refreshMenuOptions(): void
+keyPressed(int keyCode): void
+handleMenuOption(): void
+keyTyped(char key): void
-getMenuState(): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1672</x>
      <y>840</y>
      <w>264</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>/snake::Block/
--
#map: GameMap
#coordX: int
#coordY: int
#isWall = false: boolean
#blockSize: int
--
+Block(GameMap map, int x, int y): ctor
+isWall(): boolean
+hit(Head head, GameMap map): void
+draw(Graphics2D g2, int coordX, int coordY): void
+update(long millisecs): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>32</x>
      <y>1096</y>
      <w>304</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>snake::NewGameMenu
--
~menuTextMaxLength = 20: int
-menuText = "": String
-menuTextKey: int
-optionKey = new int[2]: int[]
--
+NewGameMenu(Game game, Menu previousMenu): ctor
+NewGameMenu(Game game): ctor
+draw(Graphics2D g2): void
+handleMenuOption(): void
+keyPressed(int keyCode): void
+keyTyped(char key): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>344</x>
      <y>1096</y>
      <w>192</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>snake::Rank
--
-name: String
-points: int
--
+Rank(): ctor
+Rank(String name, int points): ctor
+getName(): String
+getPoints(): int
+toString(): String
+compare(Rank r1, Rank r2): int
+compareTo(Rank o): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>544</x>
      <y>1096</y>
      <w>320</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>snake::SoundPlayer
--
-backgroundGainControl: FloatControl
-effectsGainLevel = (float) 20.0 * (float) Math.log10(0.8): Float
--
+playMusic(String fileName): void
+playSound(String fileName): void
+getBackgroundVolume(): float
+getEffectsVolume(): float
+setBackgroundVolume(float volume): void
+setEffectsVolume(float volume): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>872</x>
      <y>1096</y>
      <w>256</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>snake::Rankings
--
~rankings = new ArrayList&lt;Rank&gt;(): List&lt;Rank&gt;
--
+setRankings(List&lt;Rank&gt; rankings): void
+getRankings(): List&lt;Rank&gt;
+getRank(int rankId): Rank
+addRank(Rank rank): void
+size(): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1136</x>
      <y>1096</y>
      <w>288</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>snake::SettingsMenu
--
--
+SettingsMenu(Game game, Menu previousMenu): ctor
+SettingsMenu(Game game): ctor
+draw(Graphics2D g2): void
+handleMenuOption(): void
+keyPressed(int keyCode): void
+keyTyped(char key): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1432</x>
      <y>1096</y>
      <w>232</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>snake::KeyHandler
--
~gamePanel: GamePanel
--
+KeyHandler(GamePanel gamePanel): ctor
+keyPressed(KeyEvent e): void
+keyReleased(KeyEvent e): void
+keyTyped(KeyEvent e): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1672</x>
      <y>1096</y>
      <w>264</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>snake::Food
--
--
+Food(GameMap map, int x, int y): ctor
+draw(Graphics2D g2, int coordX, int coordY): void
+update(long millisecs): void
+hit(Head head, GameMap map): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>32</x>
      <y>1288</y>
      <w>272</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>snake::MainMenu
--
--
+MainMenu(Game game, Menu previousMenu): ctor
+MainMenu(Game game): ctor
+handleMenuOption(): void
+keyTyped(char key): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>312</x>
      <y>1288</y>
      <w>264</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>snake::Void
--
--
+Void(GameMap map, int x, int y): ctor
+draw(Graphics2D g2, int coordX, int coordY): void
+update(long millisecs): void
+hit(Head head, GameMap gameMap): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>584</x>
      <y>1288</y>
      <w>264</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>snake::Wall
--
--
+Wall(GameMap map, int x, int y): ctor
+draw(Graphics2D g2, int coordX, int coordY): void
+update(long millisecs): void
+hit(Head head, GameMap gameMap): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>856</x>
      <y>1288</y>
      <w>144</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>snake::Main
--
--
+main(String[] args): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
